BrouteForce solution --

i will use two loop 

i th loop hold one element and jth loop will travarse all over the array to find the sum == (nums[i]+nums[j] == targer)

the code is 
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        int n = nums.size();
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(nums[i]+nums[j] == target)
                {
                    ans.push_back(i);
                    ans.push_back(j);
                    return ans;
                }
            }
        }
    return {-1,-1};
    }   
};

TC = O(n^2)
---------------------------------------Better---------------------------

the better solution is to use hashMap 

---------------------Best solution---------------------------

first sort the array 
then use two pointer 

==========how to sort vector==================
sort(nums.begin(),nums.end());

==================== main code============

int i =0,j=n-1;
int sum = nums[i]+nums[j]
if(sum==target){
ans.push_back(i);ans.push_back(j);}
else if(sum<target) i++;
else j--;}

return {-1,-1};

